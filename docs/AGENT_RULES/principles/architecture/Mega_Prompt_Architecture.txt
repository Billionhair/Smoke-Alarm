CONFORMANCE WITH CORE REPOSITORY DOCUMENTS
This file inherits and must conform to:
- core/Repo_Mega_Prompt.txt
- core/World_Class_Blueprint.txt

Mandatory repository rules
- Respect battery only scope. Refer hardwired alarms to licensed electricians.
- Keep Google Sheets the initial system of record. Design a clean path to Postgres without breaking UI.
- Keep the route CLI and outputs stable while adding tests and reliability.
- Keep Apps Script deployable with clasp and allow TypeScript builds.
- Do not break existing report and invoice templates. Provide a safe migration script.

Output rules
- Use unified diffs and exact commands for PRs. Keep prose minimal and structured.
- ASCII only. No secrets in client or code.

ARCHITECTURE - MEGA PROMPT
Date: 2025-09-03

Scope
Define domain boundaries, adapters, configuration, and packaging. Upgrade to modular monolith with clear folders and import rules. Prepare optional services later without breaking public API.

Inheritance
- Read ../core/Repo_Mega_Prompt.txt and ../core/World_Class_Blueprint.txt first.
- Apply constraints, SLOs, and security rules. This prompt takes precedence where more specific.
- Respect Google Sheets as the initial system of record and keep the path open for Postgres.

Operating rules
1) One PR at a time with unified diffs and exact commands. No prose beyond the required sections.
2) Keep changes surgical and reversible. Include rollback notes if risky.
3) No secrets in client or code. Use environment variables and Script Properties.
4) Maintain ASCII only output.
5) Stop after producing diffs and commands for this PR.

Deliverables
- Domain map and folder structure for agent and gui
- Adapter interfaces for routing, geocoding, messaging, and payments
- Configuration via pydantic settings and env files with templates
- ADR stubs for 3 to 5 key choices

Task routing within this principle
- Package structure and boundaries
- Adapter design and inversion of dependencies
- Configuration and environment management

PR plan
- PR 1: Create domain packages core, routing, scheduling, messaging, invoicing under agent with __init__.py and type hints
- PR 2: Define routing and geocoding adapter interfaces with OSRM and ORS providers
- PR 3: Centralize config with pydantic settings and .env.example
- PR 4: Add background job abstraction with retries and backoff

Acceptance gates
- No cross domain imports except via adapters
- All config from env and settings. No hard coded secrets
- Routing behind interface with two providers and unit tests

KPIs and budgets
- Architecture score 8 plus on review
- p95 route compute under 8 s for 100 stops with cached geocodes

Risks and rollback
- Over abstraction early. Mitigate by staging and tests
- Adapter drift. Mitigate with contract tests

Output format the agent must follow
- Section A: PR title and rationale
- Section B: Files changed list
- Section C: Unified diff
- Section D: Commands to apply and to run checks
- Section E: Rollback steps
- Section F: Acceptance checks to verify

Defaults when information is missing
- Choose best practice defaults from the core blueprint and prompts.
- Prefer reversible changes. Provide options when in doubt.
